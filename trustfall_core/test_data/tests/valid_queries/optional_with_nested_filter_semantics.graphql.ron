TestGraphQLQuery (
    schema_name: "numbers",
    // This query tests an edge case of the semantics of `@optional` with nested `@filter`.
    //
    // `@optional` applies *only* to whether the edge exists. After the edge is resolved,
    // filters are applied normally. If the thus-resolved vertices fail to match the `@filter`,
    // they are discarded.
    //
    // We *do not* get to "retroactively" pretend that the edge did not exist at the `@optional`
    // and thereby preserve that result set with nulls for the `@optional` contents.
    //
    // If the below query returns *any* data, that's a bug.
    query: r#"
{
    Two {
        value @output

        predecessor @optional {
            predecessor: value @filter(op: ">=", value: ["$two"]) @output
        }
    }
}"#,
    arguments: {
        "two": Int64(2),
    },
)
