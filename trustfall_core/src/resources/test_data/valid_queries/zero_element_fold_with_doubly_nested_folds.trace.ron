TestInterpreterOutputTrace(
  schema_name: "numbers",
  trace: Trace(
    ops: {
      Opid(1): TraceOp(
        opid: Opid(1),
        parent_opid: None,
        content: Call(GetStartingTokens(Vid(1))),
      ),
      Opid(2): TraceOp(
        opid: Opid(2),
        parent_opid: None,
        content: Call(ProjectNeighbors(Vid(1), "Number", Eid(1))),
      ),
      Opid(3): TraceOp(
        opid: Opid(3),
        parent_opid: None,
        content: Call(ProjectProperty(Vid(1), "Number", "value")),
      ),
      Opid(4): TraceOp(
        opid: Opid(4),
        parent_opid: Some(Opid(3)),
        content: AdvanceInputIterator,
      ),
      Opid(5): TraceOp(
        opid: Opid(5),
        parent_opid: Some(Opid(2)),
        content: AdvanceInputIterator,
      ),
      Opid(6): TraceOp(
        opid: Opid(6),
        parent_opid: Some(Opid(1)),
        content: YieldFrom(GetStartingTokens(Neither(NeitherNumber(0)))),
      ),
      Opid(7): TraceOp(
        opid: Opid(7),
        parent_opid: Some(Opid(2)),
        content: YieldInto(SerializableContext(
          current_token: Some(Neither(NeitherNumber(0))),
          tokens: {
            Vid(1): Some(Neither(NeitherNumber(0))),
          },
        )),
      ),
      Opid(8): TraceOp(
        opid: Opid(8),
        parent_opid: Some(Opid(2)),
        content: YieldFrom(ProjectNeighborsOuter(SerializableContext(
          current_token: Some(Neither(NeitherNumber(0))),
          tokens: {
            Vid(1): Some(Neither(NeitherNumber(0))),
          },
        ))),
      ),
      Opid(9): TraceOp(
        opid: Opid(9),
        parent_opid: None,
        content: Call(ProjectNeighbors(Vid(2), "Number", Eid(2))),
      ),
      Opid(10): TraceOp(
        opid: Opid(10),
        parent_opid: Some(Opid(9)),
        content: AdvanceInputIterator,
      ),
      Opid(11): TraceOp(
        opid: Opid(11),
        parent_opid: Some(Opid(8)),
        content: OutputIteratorExhausted,
      ),
      Opid(12): TraceOp(
        opid: Opid(12),
        parent_opid: Some(Opid(9)),
        content: InputIteratorExhausted,
      ),
      Opid(13): TraceOp(
        opid: Opid(13),
        parent_opid: Some(Opid(9)),
        content: OutputIteratorExhausted,
      ),
      Opid(14): TraceOp(
        opid: Opid(14),
        parent_opid: Some(Opid(3)),
        content: YieldInto(SerializableContext(
          current_token: Some(Neither(NeitherNumber(0))),
          tokens: {
            Vid(1): Some(Neither(NeitherNumber(0))),
          },
          folded_contexts: {
            Eid(1): [],
          },
          folded_values: {
            (Eid(1), "predecessor"): Some(Vec([])),
            (Eid(2), "successor_counts"): Some(Vec([])),
            (Eid(2), "successors"): Some(Vec([])),
            (Eid(3), "next_successor_counts"): Some(Vec([])),
            (Eid(3), "next_successors"): Some(Vec([])),
          },
        )),
      ),
      Opid(15): TraceOp(
        opid: Opid(15),
        parent_opid: Some(Opid(3)),
        content: YieldFrom(ProjectProperty(SerializableContext(
          current_token: Some(Neither(NeitherNumber(0))),
          tokens: {
            Vid(1): Some(Neither(NeitherNumber(0))),
          },
          folded_contexts: {
            Eid(1): [],
          },
          folded_values: {
            (Eid(1), "predecessor"): Some(Vec([])),
            (Eid(2), "successor_counts"): Some(Vec([])),
            (Eid(2), "successors"): Some(Vec([])),
            (Eid(3), "next_successor_counts"): Some(Vec([])),
            (Eid(3), "next_successors"): Some(Vec([])),
          },
        ), Int64(0))),
      ),
      Opid(16): TraceOp(
        opid: Opid(16),
        parent_opid: None,
        content: ProduceQueryResult({
          "next_successor_counts": List([]),
          "next_successors": List([]),
          "predecessor": List([]),
          "successor_counts": List([]),
          "successors": List([]),
          "zero": Int64(0),
        }),
      ),
      Opid(17): TraceOp(
        opid: Opid(17),
        parent_opid: Some(Opid(3)),
        content: AdvanceInputIterator,
      ),
      Opid(18): TraceOp(
        opid: Opid(18),
        parent_opid: Some(Opid(2)),
        content: AdvanceInputIterator,
      ),
      Opid(19): TraceOp(
        opid: Opid(19),
        parent_opid: Some(Opid(1)),
        content: OutputIteratorExhausted,
      ),
      Opid(20): TraceOp(
        opid: Opid(20),
        parent_opid: Some(Opid(2)),
        content: InputIteratorExhausted,
      ),
      Opid(21): TraceOp(
        opid: Opid(21),
        parent_opid: Some(Opid(2)),
        content: OutputIteratorExhausted,
      ),
      Opid(22): TraceOp(
        opid: Opid(22),
        parent_opid: Some(Opid(3)),
        content: InputIteratorExhausted,
      ),
      Opid(23): TraceOp(
        opid: Opid(23),
        parent_opid: Some(Opid(3)),
        content: OutputIteratorExhausted,
      ),
    },
    ir_query: IRQuery(
      root_name: "Zero",
      root_component: IRQueryComponent(
        root: Vid(1),
        vertices: {
          Vid(1): IRVertex(
            vid: Vid(1),
            type_name: "Number",
          ),
        },
        folds: {
          Eid(1): IRFold(
            eid: Eid(1),
            from_vid: Vid(1),
            to_vid: Vid(2),
            edge_name: "predecessor",
            component: IRQueryComponent(
              root: Vid(2),
              vertices: {
                Vid(2): IRVertex(
                  vid: Vid(2),
                  type_name: "Number",
                ),
              },
              folds: {
                Eid(2): IRFold(
                  eid: Eid(2),
                  from_vid: Vid(2),
                  to_vid: Vid(3),
                  edge_name: "successor",
                  component: IRQueryComponent(
                    root: Vid(3),
                    vertices: {
                      Vid(3): IRVertex(
                        vid: Vid(3),
                        type_name: "Number",
                      ),
                    },
                    folds: {
                      Eid(3): IRFold(
                        eid: Eid(3),
                        from_vid: Vid(3),
                        to_vid: Vid(4),
                        edge_name: "successor",
                        component: IRQueryComponent(
                          root: Vid(4),
                          vertices: {
                            Vid(4): IRVertex(
                              vid: Vid(4),
                              type_name: "Number",
                            ),
                          },
                          outputs: {
                            "next_successors": ContextField(
                              vertex_id: Vid(4),
                              field_name: "value",
                              field_type: "Int",
                            ),
                          },
                        ),
                        fold_specific_outputs: {
                          "next_successor_counts": Count,
                        },
                      ),
                    },
                    outputs: {
                      "successors": ContextField(
                        vertex_id: Vid(3),
                        field_name: "value",
                        field_type: "Int",
                      ),
                    },
                  ),
                  fold_specific_outputs: {
                    "successor_counts": Count,
                  },
                ),
              },
              outputs: {
                "predecessor": ContextField(
                  vertex_id: Vid(2),
                  field_name: "value",
                  field_type: "Int",
                ),
              },
            ),
          ),
        },
        outputs: {
          "zero": ContextField(
            vertex_id: Vid(1),
            field_name: "value",
            field_type: "Int",
          ),
        },
      ),
    ),
  ),
  results: [
    {
      "next_successor_counts": List([]),
      "next_successors": List([]),
      "predecessor": List([]),
      "successor_counts": List([]),
      "successors": List([]),
      "zero": Int64(0),
    },
  ],
)
