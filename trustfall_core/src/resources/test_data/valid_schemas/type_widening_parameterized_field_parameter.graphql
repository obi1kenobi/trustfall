schema {
    query: RootSchemaQuery
}
directive @filter(op: String!, value: [String!]) on FIELD | INLINE_FRAGMENT
directive @tag(name: String) on FIELD
directive @output(name: String) on FIELD
directive @optional on FIELD
directive @recurse(depth: Int!) on FIELD
directive @fold on FIELD
directive @transform(op: String!) on FIELD

type RootSchemaQuery {
    Base: Base
    Derived: Derived
}

interface Base {
    field: String

    theEdge(param: [Int!]!): Base!
    theSecondEdge(param: [Int!]!): Base!
    theThirdEdge(param: [Int!]!): Base!
}

type Derived implements Base {
    field: String

    # The parent fields require a non-nullable lists of non-nullable Int parameters,
    # whereas the fields here make some or all of those components nullable.
    # These are all widening conversions, and because of contravariance this is okay.
    theEdge(param: [Int!]): Base!
    theSecondEdge(param: [Int]!): Base!
    theThirdEdge(param: [Int]): Base!
}
