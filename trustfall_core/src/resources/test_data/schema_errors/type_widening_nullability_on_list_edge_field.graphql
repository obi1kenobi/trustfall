schema {
    query: RootSchemaQuery
}
directive @filter(op: String!, value: [String!]) on FIELD | INLINE_FRAGMENT
directive @tag(name: String) on FIELD
directive @output(name: String) on FIELD
directive @optional on FIELD
directive @recurse(depth: Int!) on FIELD
directive @fold on FIELD
directive @transform(op: String!) on FIELD

type RootSchemaQuery {
    Base: Base
    Derived: Derived
}

interface Base {
    field: String

    # The list is non-nullable so the edge should be present.
    nonNullableEdge: [Other!]!
}

type Derived implements Base {
    field: String

    # The list is nullable i.e. the edge might not exist.
    # This is a widening of the parent's field type, and will cause an error.
    nonNullableEdge: [Other!]
}

type Other {
    otherField: Int
}
