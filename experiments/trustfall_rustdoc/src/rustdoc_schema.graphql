schema {
  query: RootSchemaQuery
}
directive @filter(
  """
  Name of the filter operation to perform.
  """
  op: String!
  """
  List of string operands for the operator.
  """
  value: [String!]
) repeatable on FIELD | INLINE_FRAGMENT
directive @tag(
  """
  Name to apply to the given property field.
  """
  name: String
) on FIELD
directive @output(
  """
  What to designate the output field generated from this property field.
  """
  name: String
) on FIELD
directive @optional on FIELD
directive @recurse(
  """
  Recurse up to this many times on this edge. A depth of 1 produces the current
  vertex and its immediate neighbors along the given edge.
  """
  depth: Int!
) on FIELD
directive @fold on FIELD
directive @transform(
  """
  Name of the transformation operation to perform.
  """
  op: String!
) on FIELD

type RootSchemaQuery {
  Crate: Crate!
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Crate.html
"""
type Crate {
  root: String!
  crate_version: String
  includes_private: Boolean!
  format_version: Int!

  item: [Item!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
"""
interface Item {
  id: String!
  crate_id: Int!
  name: String
  docs: String

  """
  A list of all the attributes applied to this item.

  The attributes are also available through the `attribute` edge,
  which makes certain operations easier.
  """
  attrs: [String!]!

  # stringified version of the visibility struct field
  visibility_limit: String!

  attribute: [Attribute!]
  span: Span
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Struct.html
"""
type Struct implements Item & Importable & ImplOwner {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # own properties
  struct_type: String!
  fields_stripped: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path

  # edges from ImplOwner
  """
  Any impl for this type.

  All impl kinds are included:
  - inherent impls: `impl Foo`
  - explicit trait implementations: `impl Bar for Foo`
  - blanket implementations: `impl<T> Bar for T`
  """
  impl: [Impl!]

  """
  Only inherent impls: implementations of the type itself (`impl Foo`).

  The impls pointed to here are guaranteed to have no `trait` and no `blanket` edges.

  This edge is just a convenience to simplify query-writing,
  so we don't have to keep writing "@fold @transform(...) @filter(...)" chains
  over the `trait` and `blanket` edges.

  When Trustfall supports macro edges, this should just become a macro edge.
  """
  inherent_impl: [Impl!]

  # own edges
  field: [StructField!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.Type.html
"""
type StructField implements Item {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Enum.html
"""
type Enum implements Item & Importable & ImplOwner {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # own properties
  variants_stripped: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path

  # edges from ImplOwner
  """
  Any impl for this type.

  All impl kinds are included:
  - inherent impls: `impl Foo`
  - explicit trait implementations: `impl Bar for Foo`
  - blanket implementations: `impl<T> Bar for T`
  """
  impl: [Impl!]

  """
  Only inherent impls: implementations of the type itself (`impl Foo`).

  The impls pointed to here are guaranteed to have no `trait` and no `blanket` edges.

  This edge is just a convenience to simplify query-writing,
  so we don't have to keep writing "@fold @transform(...) @filter(...)" chains
  over the `trait` and `blanket` edges.

  When Trustfall supports macro edges, this should just become a macro edge.
  """
  inherent_impl: [Impl!]

  # own edges
  variant: [Variant!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.Variant.html
"""
interface Variant implements Item {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # own edges
  field: [StructField!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.Variant.html
"""
type PlainVariant implements Item & Variant {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Variant
  field: [StructField!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.Variant.html
"""
type TupleVariant implements Item & Variant {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Variant
  field: [StructField!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.Variant.html
"""
type StructVariant implements Item & Variant {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Variant
  field: [StructField!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Span.html
"""
type Span {
  filename: String!
  begin_line: Int!
  begin_column: Int!
  end_line: Int!
  end_column: Int!
}

"""
An item that can be imported, through one or more paths.
"""
interface Importable {
  importable_path: [ImportablePath!]
  canonical_path: Path
}

"""
An item that can have impl blocks, like a struct or enum.
"""
interface ImplOwner implements Item & Importable {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path

  # own edges
  """
  Any impl for this type.

  All impl kinds are included:
  - inherent impls: `impl Foo`
  - explicit trait implementations: `impl Bar for Foo`
  - blanket implementations: `impl<T> Bar for T`
  """
  impl: [Impl!]

  """
  Only inherent impls: implementations of the type itself (`impl Foo`).

  The impls pointed to here are guaranteed to have no `trait` and no `blanket` edges.

  This edge is just a convenience to simplify query-writing,
  so we don't have to keep writing "@fold @transform(...) @filter(...)" chains
  over the `trait` and `blanket` edges.

  When Trustfall supports macro edges, this should just become a macro edge.
  """
  inherent_impl: [Impl!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/struct.Impl.html
"""
type Impl implements Item {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!

  # stringified version of the visibility struct field
  visibility_limit: String!

  # own properties
  unsafe: Boolean!
  negative: Boolean!
  synthetic: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # own edges

  """
  The trait being implemented. Inherent impls don't have a trait.

  TODO: implement me
  """
  implemented_trait: ImplementedTrait

  # """
  # The generic type across which the blanket trait implementation is made.

  # TODO: implement me
  # """
  # blanket: GenericType

  """
  Methods defined in this impl.
  """
  method: [Method!]

  """
  Constants associated with this type that are defined in this impl.
  """
  associated_constant: [AssociatedConstant!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/struct.Trait.html
"""
type Trait implements Item & Importable {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # own properties
  unsafe: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path

  # own edges
  """
  Methods defined in this trait.
  """
  method: [Method!]

  """
  Traits whose implementation is a prerequisite for implementing this trait.
  """
  supertrait: [ImplementedTrait!]

  """
  Types associated with the implementation of this trait.

  For example: in the `Iterator` trait, `Iterator::Item` is an associated type.
  """
  associated_type: [AssociatedType!]

  """
  Constants associated with this type that are defined in this impl.
  """
  associated_constant: [AssociatedConstant!]
}

"""
A possible way that an item could be imported.
"""
type ImportablePath {
  """
  The visibility restriction on this importable path.

  For example: "public"
  """
  visibility_limit: String!

  """
  The path from which the item can be imported.

  For example: ["foo", "bar", "Baz"] for a type importable as foo::bar::Baz
  """
  path: [String!]!
}

"""
The fully-qualified path of an item including the full sequence of modules in which it is found.

For example, consider a struct `Quux` in `foo/bar/mod.rs`. Its canonical path is `"foo::bar::Quux"`,
even if `foo/mod.rs` might have a line like `pub use bar::Quux;`. The re-export is visible through
the struct's ImportablePath neighbors.
"""
type Path {
  path: [String!]!
}

"""
A function-like entity, like a function, function pointer, or method.

Combines:
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Header.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.FnDecl.html
"""
interface FunctionLike {
  const: Boolean!
  unsafe: Boolean!
  async: Boolean!

  # own edges
  parameter: [FunctionParameter!]
}

"""
A function parameter.
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.FnDecl.html
"""
type FunctionParameter {
  name: String!
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Function.html
"""
type Function implements Item & FunctionLike & Importable {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # properties from FunctionLike
  const: Boolean!
  unsafe: Boolean!
  async: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from FunctionLike
  parameter: [FunctionParameter!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Method.html
"""
type Method implements Item & FunctionLike {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # properties from FunctionLike
  const: Boolean!
  unsafe: Boolean!
  async: Boolean!

  # edge from Item
  span: Span
  attribute: [Attribute!]

  # edges from FunctionLike
  parameter: [FunctionParameter!]
}

"""
Common supertype of `Constant` and `Static`.
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
"""
interface GlobalValue implements Item & Importable {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/struct.Constant.html
"""
type Constant implements Item & Importable & GlobalValue {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/enum.ItemEnum.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/struct.Static.html
"""
type Static implements Item & Importable & GlobalValue {
  # properties from Item
  id: String!
  crate_id: Int!
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # own properties
  mutable: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]

  # edges from Importable
  importable_path: [ImportablePath!]
  canonical_path: Path
}

"""
A specific attribute applied to an Item.
"""
type Attribute {
  """
  String representation of the attribute as it is found in the code.

  For example: `#[non_exhaustive]`
  """
  raw_attribute: String!

  """
  True for an inner attribute (starting with `#![`), and false for an
  outer one (starting with `#[`).

  For example: false for `#[non_exhaustive]`
  """
  is_inner: Boolean!

  # edges

  # Edge to parsed content of the attribute
  content: AttributeMetaItem!
}

"""
A single meta item used by a specific attribute
(see https://doc.rust-lang.org/reference/attributes.html#meta-item-attribute-syntax).
"""
type AttributeMetaItem {
  """
  The entire meta item represented as a string as it is found in the code.

  For example: `"derive(Debug, Clone)"`
  """
  raw_item: String!

  """
  SimplePath of the meta item.

  For example: `"derive"` for `derive(Debug, Clone)`,
               `"must_use"` for `must_use = "example_message"`
  """
  base: String!

  """
  Assigned item if the meta item is in the form `SimplePath = AssignedItem`.

  For example: `"\"example_message\""` for `must_use = "example_message"`
  """
  assigned_item: String

  # edges

  """
  Inner meta items if the meta item is in the form `SimplePath(MetaSeq)`.

  For example: `[AttributeMetaItem::new("Debug"), AttributeMetaItem::new("Clone")]`
  for `derive(Debug, Clone)`
  """
  argument: [AttributeMetaItem!]
}

"""
The trait that is being implemented in an impl block.

In `impl Foo<u64> for Bar`, this is the `Foo<u64>` part.
"""
type ImplementedTrait {
  name: String!

  # own edges
  """
  In `impl Foo<u64> for Bar`, this refers to `trait Foo<T>`.
  """
  trait: Trait
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/enum.ItemEnum.html#variant.AssocType
"""
type AssociatedType implements Item {
  # properties from Item
  id: String!
  crate_id: Int!

  """
  The name of the associated type.

  For example:
  ```rust
  trait Iterator {
      type Item;  // `"Item"` is the name of the associated type
  }
  ```
  """
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # properties for AssociatedType
  """
  Whether the type is defined to have a default value.

  For example:
  ```rust
  trait IntIterator {
      type Item = i64;  // by default, the associated type is `i64` so this property is `true`.
  }
  ```

  Associated type defaults are currently unstable: https://github.com/rust-lang/rust/issues/29661
  """
  has_default: Boolean!

  # edges from Item
  span: Span
  attribute: [Attribute!]
}

"""
https://docs.rs/rustdoc-types/0.11.0/rustdoc_types/struct.Item.html
https://docs.rs/rustdoc-types/latest/rustdoc_types/enum.ItemEnum.html#variant.AssocConst
"""
type AssociatedConstant implements Item {
  # properties from Item
  id: String!
  crate_id: Int!

  """
  The name of the associated constant.

  For example:
  ```rust
  trait BatchIterator {
    const SIZE: usize;  // `"SIZE"` is the name of the associated constant
  }
  ```
  """
  name: String
  docs: String
  attrs: [String!]!
  visibility_limit: String!

  # properties for AssociatedConstant
  """
  The constant's default value, if any, as a Rust literal, expression, or `"_"`.

  For example:
  ```rust
  trait BatchIterator<const MIN: usize> {
    const SIZE: usize = 16;  // `"16"` is the default

    // `"\"batch\""` is the default, including escaped quotes
    const LOG_AS: &'static str = "batch";

    // "MIN" is the default, referring to the other constant's name
    const MIN_SIZE: usize = MIN;
  }
  ```

  If the associated constant is on a type's inherent impl, the default
  is always required to be set.

  If the associated constant is set to be equal to another constant,
  the default holds the name of that other constant.

  If the associated constant is set by evaluating a `const` expression,
  such as `2 + 2` or a `const fn` call, rustdoc's current behavior is
  to show a default value of `"_"` instead of evaluating
  the constant value or including the full expression.
  """
  default: String

  # edges from Item
  span: Span
  attribute: [Attribute!]
}
