diff --git a/esm/interface/getAutocompleteSuggestions.js b/esm/interface/getAutocompleteSuggestions.js
index ac159d132d095a789b966627d315f4238c79ab60..1d6f624a8ad888ebbe8aa9092feb845a7d8205b0 100644
--- a/esm/interface/getAutocompleteSuggestions.js
+++ b/esm/interface/getAutocompleteSuggestions.js
@@ -63,6 +63,8 @@ const hasTypeSystemDefinitions = (sdl) => {
     }
     return hasTypeSystemDef;
 };
+const primitives = new Set(['Int', 'Float', 'String', 'Boolean', 'ID'])
+const propertyDirectives = new Set(['filter', 'tag', 'output', 'transform'])
 export function getAutocompleteSuggestions(schema, queryText, cursor, contextToken, fragmentDefs, options) {
     var _a;
     const opts = Object.assign(Object.assign({}, options), { schema });
@@ -234,7 +236,23 @@ export function getAutocompleteSuggestions(schema, queryText, cursor, contextTok
         return getSuggestionsForVariableDefinition(token, schema, kind);
     }
     if (kind === RuleKinds.DIRECTIVE) {
-        return getSuggestionsForDirective(token, state, schema, kind);
+        // We should autocomplete fields on the line after we autocomplete a directive
+        if (state.needsAdvance || state.name === null) { // active after '@' or many other kinds of punctuation, so perfect for when we need to autocomplete directives.
+                                                         // `state` is `null` when the user autocompletes after typing just '@' then opening autocomplete menu
+            // further restrict the directives we suggest based on the type of the field we are on
+            // x.label does not include the '@'
+            let fieldType = typeInfo.fieldDef.type;
+            while (fieldType.ofType) {
+                fieldType = fieldType.ofType
+            }
+            if (primitives.has(fieldType.name)) {
+                return getSuggestionsForDirective(token, state, schema, kind).filter(x => propertyDirectives.has(x.label))
+            } else {
+                return getSuggestionsForDirective(token, state, schema, kind) // Don't filter edges until we can decide if there is a @transform(op: "count") before this directive, which would force us to switch to property directives
+            }
+        } else { // there has been no '@' so we should autocomplete fields
+            return getSuggestionsForFieldNames(token, typeInfo, opts);
+        }
     }
     return [];
 }
diff --git a/esm/interface/getDiagnostics.js b/esm/interface/getDiagnostics.js
index 38a10439b1a5d7e7adbdd3e16c743a9cedff9dab..c699c3166cf458a5f9e85a794591fd445e843821 100644
--- a/esm/interface/getDiagnostics.js
+++ b/esm/interface/getDiagnostics.js
@@ -90,7 +90,7 @@ export function getRange(location, queryText) {
     const lines = queryText.split('\n');
     invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');
     let stream = null;
-    for (let i = 0; i < location.line; i++) {
+    for (let i = 0; i <= location.line; i++) { // fix console error spam from hovering a comment on the first line of a file by properly visiting the first line of a file
         stream = new CharacterStream(lines[i]);
         while (!stream.eol()) {
             const style = parser.token(stream, state);
