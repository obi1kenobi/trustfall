name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  ci-everything:
    name: All CI stages
    runs-on: ubuntu-latest
    needs:
      - lint
      - rust-tests
      - python-tests
      - wasm-tests
      - js-lint
    steps:
      - run: exit 0

  python-tests:
    name: Python tests and maturin build
    runs-on: ubuntu-latest
    needs:
      - rust-tests
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            trustfall_core/target/
            trustfall_wasm/target/
            pytrustfall/target/
            experiments/schemaless/target/
            experiments/schemaless_wasm/target/
            experiments/trustfall_rustdoc/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: pytrustfall/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd pytrustfall
          poetry install --no-interaction --no-root

      - name: maturin build and test
        run: |
          cd pytrustfall
          source .venv/bin/activate
          maturin develop
          pytest
          maturin build --interpreter python -o target/wheels/

      - name: Set environment variables
        id: branch-info
        run: |
          set -ex
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$(.github/workflows/get_py_prerelease_name.sh)" >> $GITHUB_OUTPUT
          echo "PYTHON_BINDINGS_CHANGED=$(.github/workflows/python_bindings_changed.sh)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: steps.branch-info.outputs.PYTHON_BINDINGS_CHANGED != 0
        with:
          name: pytrustfall-wheels
          path: pytrustfall/target/wheels/
          retention-days: 1

      - name: Make a new prerelease
        uses: ncipollo/release-action@v1
        if: steps.branch-info.outputs.BRANCH_NAME == 'main' && steps.branch-info.outputs.PYTHON_BINDINGS_CHANGED != 0
        with:
          artifacts: "pytrustfall/target/wheels/*.whl,pytrustfall/target/wheels/*.tar.gz"
          commit: ${{ steps.branch-info.outputs.COMMIT }}
          tag: ${{ steps.branch-info.outputs.TAG_NAME }}
          generateReleaseNotes: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Check lint and rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            trustfall_core/target/
            trustfall_wasm/target/
            pytrustfall/target/
            experiments/schemaless/target/
            experiments/schemaless_wasm/target/
            experiments/trustfall_rustdoc/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings --allow deprecated

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  rust-tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            trustfall_core/target/
            trustfall_wasm/target/
            pytrustfall/target/
            experiments/schemaless/target/
            experiments/schemaless_wasm/target/
            experiments/trustfall_rustdoc/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo test
        run: cargo test

  wasm-tests:
    name: WASM tests
    runs-on: ubuntu-latest
    needs:
     - rust-tests
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            trustfall_core/target/
            trustfall_wasm/target/
            pytrustfall/target/
            experiments/schemaless/target/
            experiments/schemaless_wasm/target/
            experiments/trustfall_rustdoc/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Run cargo test and wasm-pack tests
        run: |
          cd trustfall_wasm
          cargo test
          wasm-pack test --headless --firefox
          wasm-pack test --headless --chrome

      - name: Set environment variables
        id: branch-info
        run: |
          set -ex
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$(.github/workflows/get_wasm_prerelease_name.sh)" >> $GITHUB_OUTPUT
          echo "WASM_CHANGED=$(.github/workflows/wasm_pkg_changed.sh)" >> $GITHUB_OUTPUT

      - name: Build WASM module
        if: steps.branch-info.outputs.WASM_CHANGED != 0
        run: |
          cd trustfall_wasm
          wasm-pack build --no-typescript
          cp src/trustfall_wasm.d.ts pkg/
          cd pkg/
          tar -czvf ../trustfall_wasm.tar.gz --exclude='.gitignore' .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: steps.branch-info.outputs.WASM_CHANGED != 0
        with:
          name: wasm-module
          path: trustfall_wasm/pkg/
          retention-days: 1

      - name: Make a new prerelease
        uses: ncipollo/release-action@v1
        if: steps.branch-info.outputs.BRANCH_NAME == 'main' && steps.branch-info.outputs.WASM_CHANGED != 0
        with:
          artifacts: "trustfall_wasm/trustfall_wasm.tar.gz"
          commit: ${{ steps.branch-info.outputs.COMMIT }}
          tag: ${{ steps.branch-info.outputs.TAG_NAME }}
          generateReleaseNotes: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

  js-lint:
    name: Run JS linters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: experiments/schemaless_wasm/www/
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust  # necessary for `npm run build:wasm` later
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build wasm package
        run: npm run build:wasm

      - name: Run linters
        run: npm run lint

  attempt-publish-trustfall-filetests-macros:
    name: publish trustfall_filetests_macros
    if: github.ref == 'refs/heads/main'
    needs:
      - ci-everything
    uses: ./.github/workflows/publish-rust.yml
    with:
      crate-name: trustfall_filetests_macros
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  attempt-publish-trustfall-core:
    name: publish trustfall_core
    if: github.ref == 'refs/heads/main'
    needs:
      - ci-everything
      - attempt-publish-trustfall-filetests-macros
    uses: ./.github/workflows/publish-rust.yml
    with:
      crate-name: trustfall_core
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  attempt-publish-pytrustfall:
    name: publish python trusfall
    if: github.ref == 'refs/heads/main'
    needs:
      - ci-everything
      - attempt-publish-trustfall-core
    uses: ./.github/workflows/publish-python.yml
    secrets:
      PYPI_TOKEN: ${{ secrets.MATURIN_PYPI_TOKEN }}
